@page "/index.html"
@using NeuralNetworkNET.APIs.Enums;
@using NeuralNetworkNET.APIs.Interfaces;
@using NeuralNetworkNET.APIs;
@using nntrain;
@using nntrain.core;
@inject HttpClient mHttpClient;

<PageTitle>predictions</PageTitle>

@code {
    public class FieldProperty
    {
        public FieldProperty(int index, string name, float? initialValue, float min, float max)
        {
            Index = index;
            Name = name;
            Value = initialValue;
            MinValue = min;
            MaxValue = max;
        }

        public int Index { get; set; }
        public float? Value { get; set; }
        public string Name { get; set; }
        public float MinValue { get; set; }
        public float MaxValue { get; set; }
        public float NormalizedValue() => ((Value ?? MinValue) - MinValue) / (MaxValue - MinValue);
    }

    INeuralNetwork? mNeuralNetwork;

    public float[] PredictionInput = new float[17];

    public List<FieldProperty> Fields = new()
    {
        new(0, "Account Balance", null, 0.0f, 19043.139f),
        new(1, "Balance Update Frequency", null, 0.0f, 1.0f),
        new(2, "Total Purchases", null, 0.0f, 49039.57f),
        new(3, "One-time Purchase Amount", null, 0.0f, 40761.25f),
        new(4, "Installment Purchase Amount", null, 0.0f, 22500.0f),
        new(5, "Cash Advance Amount", null, 0.0f, 47137.21f),
        new(6, "Purchase Frequency", null, 0.0f, 1.0f),
        new(7, "One-time Purchase Frequency", null, 0.0f, 1.0f),
        new(8, "Installment Purchase Frequency", null, 0.0f, 1.0f),
        new(9, "Cash Advance Frequency", null, 0.0f, 1.5f),
        new(10, "Cash Advance Transactions", null, 0.0f, 123.0f),
        new(11, "Purchase Transactions", null, 0.0f, 358.0f),
        new(12, "Credit Limit", null, 5.0f, 30000.0f),
        new(13, "Total Payments", null, 0.0f, 50721.484f),
        new(14, "Minimum Payments", null, 0.019163f, 76406.21f),
        new(15, "Full Payment Percentage", null, 0.0f, 1.0f),
        new(16, "Customer Tenure", null, 6.0f, 12.0f),
    };

    public void ForwardInputs()
    {
        for(int i = 0; i < Fields.Count; i++)
            PredictionInput[i] = Fields.First(x => x.Index == i).NormalizedValue();

        var result = mNeuralNetwork!.Forward(PredictionInput);
        var label = BL.DecodeTarget(result);

        DisplayPrediction(label);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var networkUrl = "https://mandero9.github.io/dm/network.nnet";

        var networkFile = await mHttpClient.GetStreamAsync(networkUrl);
        mNeuralNetwork = NetworkLoader.TryLoad(networkFile, ExecutionModePreference.Cpu);
    }

    private void DisplayPrediction(string prediction)
    {
        FieldsClasses = "hidden";
        Prediction = prediction.Remove(prediction.Length - 1);
        PredictionDisplayed = true;
        ContainerClasses = "offsetted";
    }
    private void HidePrediction()
    {
        FieldsClasses = "";
        ContainerClasses = "";
        PredictionDisplayed = false;
    }

    private string FieldsClasses = "";
    private string ContainerClasses = "";
    private bool PredictionDisplayed = false;
    private string Prediction = "None";
}

<div class="container @ContainerClasses">
    <div class="main-header">
        <span>Expenses Prediction</span><br />
        <span class="gray-text">Fill in your information in the form below then click predict</span>
    </div>


    <div class="prediction-fields">

        <div class="prediction-container @(PredictionDisplayed ? "visible" : "")">
            <div class="prediction">@Prediction</div>
            <div class="message gray-text">Your result shows that you are @(Prediction.StartsWith("a", StringComparison.OrdinalIgnoreCase) ? "an" : "a") @Prediction !</div>


            <div class="prediction-button-container">
                <span>
                    <button class="gray-text" @onclick="HidePrediction">Try again</button>
                </span>
            </div>
        </div>

        <div class="animate-fields @(FieldsClasses)">

            <div class="fields-container">
                @foreach(var field in Fields)
                {
                    <label>
                        <div>@field.Name</div>
                        <input placeholder="(@field.MinValue.ToString("F2") - @field.MaxValue.ToString("F2"))" @bind="field.Value" type="number" min="@field.MinValue" max="@field.MaxValue" />
                    </label>
                }
                <div class="prediction-button-container">
                    <span>
                        <button class="gray-text" @onclick="ForwardInputs">Predict</button>
                    </span>
                </div>
            </div>
        </div>
    </div>

</div>

